import sys, os
# import tkinter as tk

folder_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '../'))
sys.path.append(folder_path)

# from ballgui import HelpPage
from Mothball_Pages.HelpPage import Page

class Intro(Page):
    def __init__(self, master = None, pack=True):
        super().__init__(master, pack)
        self.master = master
               
        ### Main Help Page
        # Welcome to Mothball
        self.heading("Welcome to Mothball!")
        self.insert_text("Welcome to Mothball, a powerful lightweight tool for efficiently stratfinding minecraft parkour! While not required, proficiency in basic stratfinding is highly recommended. This tutorial will introduce Mothball syntax, and then the common use cases for Minecraft version 1.8, since the main version of parkour is 1.8, although Mothball also supports modern versions. From here on, this tutorial will be for Minecraft version 1.8.\n\n")

        # Getting Started - Basic Minecraft Movement
        self.heading("Getting Started - Basic Minecraft Movement")
        self.insert_text("Let's learn your first function! Can you guess what the following code does?\n")
        self.code_snippet("print(hello world)")
        self.insert_text('Yep, it prints "hello world"! Okay, back to the main topic...\n\n')

        ## After the hello world example
        self.insert_text("There are 7 movement keys in Minecraft. They are: W (forward), A (left), S (backward), D (right), Sprint, Sneak, and Jump. The way that Mothball calculates movement is the following:\n")
        self.insert_text("        1. Add current velocity to your position\n")
        self.insert_text("        2. Calculate the acceleration\n")
        self.insert_text("        3. Add the acceleration to velocity\n")
        self.insert_text("\nNote that this is different from how Minecraft calculates movement in game, where position is calculated last. Mothball chooses to calculate it first to make the common parkour notions more intuitive.")
        self.insert_text("You should also be familiar enough with ticks, the in game unit of time Minecraft uses. 1 tick = 0.05 seconds, or 20 ticks = 1 second. Jumping in place is 12 ticks or 0.6 seconds. From here on, we'll abbreviate tick as 't', so 20t = 1s\n\n")

        self.heading("A Running Example")
        self.insert_text("Let's simulate sprinting. To simulate sprinting for 1t, we just write ")
        self.inline_code("sprint")
        self.insert_text(". The code and output looks like this:\n")
        self.code_snippet_with_output("sprint")
        # self.insert_text("Great! Let's simulate sprinting for 5t. Since ")
        self.insert_text("Great! Now ")
        self.inline_code("sprint")
        self.insert_text(" sprints for 1t, then we can just write\n")
        self.code_snippet_with_output("sprint sprint sprint sprint sprint")
        self.insert_text("Yea that is quite the hassle. Luckily, you don't need to write the same function 5 times. To sprint for multiple ticks, we add parenthesis after the function and put the number of ticks between the parenthesis. It looks like this:\n")
        self.code_snippet_with_output("sprint(5)")
        self.insert_text("For the nerdy programmers, they would recognize that this is how a function is normally called. In general, to repeat the same movement for multiple ticks, we write ")
        self.inline_code("movement(duration)")
        self.insert_text(" where ")
        self.inline_code("duration")
        self.insert_text(" is a nonnegative integer. Mothball will check if this number is nonnegative, otherwise you get this error.\n")
        self.code_snippet_with_output("sprint(-3)")
        self.insert_text("Can we be even more concise? Yes we can! Typing ")
        self.inline_code("sprint(5)")
        self.insert_text(" is pretty fast, but we can be faster. Instead, we can just type ")
        self.inline_code("s(5)")
        self.insert_text(" and it will do the exact same thing.\n")
        self.code_snippet_with_output("s(5)")
        self.insert_text("The idea is that because ")
        self.inline_code("sprint")
        self.insert_text(" is a super common function, there are shorthand ways to type it. These are called aliases, which basically means a Mothball function can be called using different names. In this example, ")
        self.inline_code("s")
        self.insert_text(" is an alias of ")
        self.inline_code("sprint")
        self.insert_text(".\n\nMost Mothball functions have at least one alias, whose purpose is to reduce the time spent typing. Some function's full name can get very long, for example ")
        self.inline_code("sneaksprintjump")
        self.insert_text(" vs ")
        self.inline_code("snsj")
        self.insert_text(" . Aliases are almost always abbreviations (such as SNeakSprintJump) so they won't be a totally new thing to have to learn. And even if you forgot, Mothball's error message will provide suggestions, or you can check ")
        self.inline_code("help()")
        self.insert_text(" with the full name of the function to find its aliases.\n\nNow you know how to simulate sprinting. To check your understanding, use Mothball to approximate the max speed that you can reach by just sprinting. You should get approximately 0.2806167.\n\n")

        self.heading("Reading the Documentation")
        self.insert_text("It helps to be able to read the documentation for each function. Each function has its own section dedicated to detailing its behavior. We'll show how to interpret the function's signature.\n\nLet's say we are reading documentation on the ")
        self.inline_code("sprint")
        self.insert_text(" function. It looks like this...\n\n")
        self.show_function_signature("sprint")
        self.insert_text("\nFirst, we see that it has aliases. In this example, ")
        self.inline_code("s")
        self.insert_text(" is the only other alias of ")
        self.inline_code("sprint")
        self.insert_text(".\n\nNext, we see the function's arguments, which show the name of the parameter, the datatype of the parameter, and the default value. For example, we see that the ")
        self.inline_code("duration")
        self.insert_text(" parameter is of type ")
        self.inline_code("int")
        self.insert_text(" (stands for integer) and defaults to 1. In general, the format is ")
        self.inline_code("parameter: datatype = default")
        self.insert_text(".\n\nThe last thing to notice is the special symbols ")
        self.inline_code("/")
        self.insert_text(" and ")
        self.inline_code("*")
        self.insert_text(". These indicate if a parameter is positional, keyword, or both. If you're familiar with python function syntax and signatures, this is exactly what it is. If not, we'll explain it.\n\n")
        self.insert_text("Function signatures can include special symbols ")
        self.inline_code("/")
        self.insert_text(" and ")
        self.inline_code("*") 
        self.insert_text(" to specify how parameters can be passed. The ") 
        self.inline_code("/")
        self.insert_text(" symbol indicates that all preceding parameters are positional-only, meaning they cannot be passed as keyword arguments. These can be passed by just simply providing the argument. For the ")
        self.inline_code("sprint")
        self.insert_text(" function, duration and rotation are positional only arguments. The only way to pass arguments is by providing them directly, for example, ")
        self.inline_code("sprint(6, 20)")
        self.insert_text(". The order of arguments matters.\n\nThe ")
        self.inline_code("/")
        self.insert_text(" symbol indicates that all following parameters are keyword-only, meaning they cannot be passed as positional arguments. These can be passed by explicitly writing the parameter name followed by an equal sign, and then the argument. For the ")
        self.inline_code("sprint")
        self.insert_text(" function, slip, speed, and slow are keyword only arguments. The only way to pass these kinds of arguments is like this: ")
        self.inline_code("sprint(slip=0.98, slow=3, speed=1)")
        self.insert_text(". Note that the order for keyword arguments doesn't matter, since you're explicitly telling Mothball what parameter to pass to.\n\n")
        self.insert_text("Finally, anything in between the two symbols means they can be positional or keyword.\n\n")
        self.insert_text("There's one more scenario required to know for Mothball, and that is var positional parameters. Let's look at the ")
        self.inline_code("anglequeue")
        self.insert_text(" function's signature.\n\n")
        self.show_function_signature("aq")
        self.insert_text("\nThe *angles means that this function takes an infinite number of strictly positional arguments, provided that they're decimal numbers for this scenario. Calling ")
        self.inline_code("aq(1,2,3,4,5)")
        self.insert_text(" and ")
        self.inline_code("aq(-3.141,2.718,1.618,-9.81, 6.28, 1.414)")
        self.insert_text(" are valid uses. Anything after the var positional parameter must be strictly a keyword parameter.")
        self.finalize()

if __name__ == "__main__":
    import tkinter as tk
    r = tk.Tk()
    a = Intro(r)
    print(a.headings)
    r.mainloop()