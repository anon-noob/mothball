import sys, os
# import tkinter as tk

folder_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '../'))
sys.path.append(folder_path)

# from ballgui import HelpPage
from TkinterPosition import TkinterPosition
from Mothball_Pages.HelpPage import Page


class Movement(Page):
    def __init__(self, master = None, pack=True):
        super().__init__(master, pack)

        self.heading("Movement in Mothball")
        self.insert_text("There are a lot of ways to combine the standard 7 inputs (WASD Jump Sneak Sprint). Mothball provides functions for simulating these combinations. Below are the list of basic movements that a player can do under normal circumstances.\n\n")
        self.insert_text("1. "); self.inline_code("walk"); self.insert_text(" - Walk on the ground, has alias "); self.inline_code("w"); self.insert_text(".\n")
        self.insert_text("2. "); self.inline_code("sprint"); self.insert_text(" - Sprint on the ground, has alias "); self.inline_code("s"); self.insert_text(".\n")
        self.insert_text("3. "); self.inline_code("sneak"); self.insert_text(" - Sneak on the ground, has alias "); self.inline_code("sn"); self.insert_text(".\n")
        self.insert_text("4. "); self.inline_code("sneaksprint"); self.insert_text(" - Sprint and sneak on the ground (Versions 1.14 - 1.21.3), has alias "); self.inline_code("sns"); self.insert_text(".\n")
        self.insert_text("5. "); self.inline_code("stop"); self.insert_text(" - No movement input while on the ground, has alias "); self.inline_code("st"); self.insert_text(".\n")
        self.insert_text("6. "); self.inline_code("walkjump"); self.insert_text(" - Just a normal jump, has alias "); self.inline_code("wj"); self.insert_text(".\n")
        self.insert_text("7. "); self.inline_code("sprintjump"); self.insert_text(" - Jump but with sprint, has alias "); self.inline_code("sj"); self.insert_text(".\n")
        self.insert_text("8. "); self.inline_code("sneakjump"); self.insert_text(" - Jump but with sneak, has alias "); self.inline_code("snj"); self.insert_text(".\n")
        self.insert_text("9. "); self.inline_code("sneaksprintjump"); self.insert_text(" - Jump but with sprint and sneak (Versions 1.14 - 1.21.3), has alias "); self.inline_code("snsj"); self.insert_text(".\n")
        self.insert_text("10. "); self.inline_code("stopjump"); self.insert_text(" - Jump in place with no other movement input, has alias "); self.inline_code("stj"); self.insert_text(".\n")
        self.insert_text("11. "); self.inline_code("walkair"); self.insert_text(" - Moving while airborne, has alias "); self.inline_code("wa"); self.insert_text(".\n")
        self.insert_text("12. "); self.inline_code("sprintair"); self.insert_text(" - Moving while airborne and sprinting, has alias "); self.inline_code("sa"); self.insert_text(".\n")
        self.insert_text("13. "); self.inline_code("sneakair"); self.insert_text(" - Moving while airborne and sneaking, has alias "); self.inline_code("sna"); self.insert_text(".\n")
        self.insert_text("14. "); self.inline_code("sneaksprintair"); self.insert_text(" - Moving while airborne, sneaking, and sprinting (Versions 1.14 - 1.21.3), has alias "); self.inline_code("snsa"); self.insert_text(".\n")
        self.insert_text("15. "); self.inline_code("stopair"); self.insert_text(" - No movement input while midair, has alias "); self.inline_code("sta"); self.insert_text(".\n")
        
        self.insert_text("\nOf course there are other possible movements such as while inside water, cobwebs, sword blocks or shielding, and so on, as well as additional unique functions, such as ")
        self.inline_code("sprintstrafejump")
        self.insert_text(" but we will talk about that later. The aliases mentioned just mean that you can simulate the same movement using different names, so ")
        self.inline_code("walk")
        self.insert_text(" is equivalent to ")
        self.inline_code("w")
        self.insert_text(".\n\n")


        self.heading2("Movement Durations")
        self.insert_text("In mothball, typing the movement alone will simulate 1 tick of that movement. For example, we can write ")
        self.inline_code("sprint")
        self.insert_text(" to sprint for 1 tick. We can specify how many ticks of movement we would like, for example ")
        self.inline_code("sprint(4) sneakair(5)")
        self.insert_text(" sprints for 4 ticks, then sneaks while midair for 5 ticks.\n\n")


        self.insert_text("While something like ")
        self.inline_code("sprint(4)")
        self.insert_text(" is identical to ")
        self.inline_code("sprint sprint sprint sprint")
        self.insert_text(" or even ")
        self.inline_code("repeat(sprint, 4)")
        self.insert_text(" this does not apply with jump functions. For jump functions, all ticks following the first are replaced with the respective air movement. For example, a ")
        self.inline_code("sprintjump")
        self.insert_text(" (we'll use its shorter alias ")
        self.inline_code("sj")
        self.insert_text(") becomes ")
        self.inline_code("sprintair")
        self.insert_text(" on the following ticks (we'll use its shorter alias ")
        self.inline_code("sa")
        self.insert_text("). Observe that\n")
        self.code_snippet_with_output("sj(5)")
        self.insert_text("is equivalent to\n")
        self.code_snippet_with_output("sj sa sa sa sa\n# or you can write sj sa(4)")
        self.insert_text("and not equivalent to\n")
        self.code_snippet_with_output("sj sj sj sj sj")
    
        self.insert_text("So in general, any jump function follows this formula: ")
        self.inline_code("jump(t) = jump air(t-1)")
        self.insert_text(".\n\n")

        self.heading2("Setting Inputs")
        self.insert_text("So far, we have only simulated movement going forward, equivalent to pressing W in game. What if instead of walking forward, we wanted to walk while pressing D?\n\n")
        self.insert_text("10 of the listed movement functions can have inputs attached to them. The only functions that can't are ")
        self.inline_code("stop")
        self.insert_text(" functions. To add inputs, we use the syntax ")
        self.inline_code("movement.keys")
        self.insert_text(" where ")
        self.inline_code("movement")
        self.insert_text(" is the movement function and ")
        self.inline_code("keys")
        self.insert_text(" are the inputs. So how do we walk 10 ticks with A? Let's also use its shorter alias.\n")
        self.code_snippet_with_output("w.a(10)")
        self.insert_text("Previously there has been no X movement, as you face 0 degrees by default, which in game points in the positive Z direction. In this case, we are moving directly to the side, resulting in only X movement, specifically towards negative X. The Minecraft coordinate system is different then the usual coordinate system you might know in math class.\n\n")

        self.insert_text("We are not limited to only specifying one input per function.We can specify two inputs! What if we want to sprint jump with W and A for 12 ticks?\n")
        self.code_snippet_with_output("sj.wa(12)")
        self.insert_text("There are only 8 combinations of valid inputs, which are ")
        self.inline_code(".w .s .a .d .wa .wd .sa .sd")
        self.insert_text(". Any other input given will raise an error. We enforce strictly the use these 8 inputs to make readability as consistent as possible, so even while ")
        self.inline_code("ds")
        self.insert_text(" is functionally equivalent to ")
        self.inline_code("sd")
        self.insert_text(" in game, when it comes to discussing and sharing strategies, we typically mention w/s before a/d.\n\n")

        self.heading2("Reversing Inputs")
        self.insert_text("We can reverse inputs by placing a ")
        self.inline_code("-")
        self.insert_text(" directly before a movement function, such as ")
        self.inline_code("-wa")
        self.insert_text(". This effectively reverses the input for that function. Since ")
        self.inline_code("wa")
        self.insert_text(" by default goes forward with W, then ")
        self.inline_code("-wa")
        self.insert_text(" reverses the W into S, so this is equivalent to ")
        self.inline_code("wa.s")
        self.insert_text(". Likewise, ")
        self.inline_code("-wj.wd")
        self.insert_text(" reverses the W into S and D into A, so this is equivalent to ")
        self.inline_code("wj.sa")
        self.insert_text(". This does mean that you could have nonsensical movement in Mothball which would otherwise be impossible in game. We can see that ")
        self.inline_code("-sj.wa")
        self.insert_text(" is equivalent to ")
        self.inline_code("sj.sd")
        self.insert_text(", both of which are valid to write in Mothball, but how do you sprint going backwards?\n\n")
        self.insert_text("For the sake of readability, the general consensus is to use ")
        self.inline_code("-")
        self.insert_text(" only if its equivalent is the same as adding S in the inputs. Most people prefer appending the input manually for clarity.\n")
        self.code_snippet("# Do this # wj.sa(12) w.sa sj.wd(12)\n# Not this # -wj.wd(12) -w.wd sj.wd(12)")
        self.insert_text("\n")

        self.heading2("Some Input Examples")
        self.insert_text("Let's simulate some more complex common parkour strategies. It's also good to note here, a jump on flat ground lasts 12 ticks total. These examples will assume that we are on flat ground.\n")
        self.insert_text("\n1. Max Force Momentum (abbr. \"max fmm\" or \"1t fmm\") - jump forward without sprint, then sprint immediately after (you activate sprint midair).\n")
        self.code_snippet("wj sa(11)")
        self.insert_text("\n2. Carpet 4.5 (abbr. \"c4.5\") - jump forward without sprint, then 4 ticks later, activatet sprint. Sprint 1 more tick once you land.\n")
        self.code_snippet("wj(4) sa(8) s")
        self.insert_text("\n3. Rex Backwards Momentum (abbr. \"rex bwmm\") - jump back with s, then walk 1 tick back with s, sprint jump forward with strafe, then sprint in air forward until we land.\n")
        self.code_snippet("wj.s(12) w.s sj.wd sa(11)\n# Note that sj.wa is also valid in this example")
        self.insert_text("\n")

        self.heading("Angles")
        self.insert_text("Until now, everything has been done facing 0, but of course we can change that. To set the facing, we can add an additional number in the function's arguments. The first argument is the duration, and the second is the angle or rotation. So the syntax is ")
        self.inline_code("movement.keys(duration, rotation)")
        self.insert_text(".\n\nSo to sprint with W and D for 4 ticks at a 36.7 degree angle, write\n")
        self.code_snippet_with_output("s.wd(4, 36.7)")
        self.insert_text("\nIn the above example, we sprinted for 4 ticks with W and D while facing 36.7 degrees. However,\n")
        self.code_snippet_with_output("s.wd(4, 36.7) sj(3)")
        self.insert_text("is not equivalent to\n")
        self.code_snippet_with_output("s.wd(4, 36.7) sj(3, 36.7)")
        self.insert_text("\nand that is because the the angle specified only applies for that specific movement. What if we wanted it to apply to all movements?\n\n")

        self.heading2("Facing")
        self.insert_text("Introducing the ")
        self.inline_code("face")
        self.insert_text(" function (alias ")
        self.inline_code("f")
        self.insert_text(")! The facing function sets the default facing for the rest of the simulation. The way to do this is to write ")
        self.inline_code("f(number)")
        self.insert_text(".\n\nIn the last example, we can rewrite the simulated sequence as\n")
        self.code_snippet_with_output("f(36.7) s.wd(4) sj(3)")
        self.insert_text("\nOf course, if we want to change the default facing later on, we can!\n\n")
        self.code_snippet("f(20) sj(12) s(2) f(-14.1) sj(6)\n# is equivalent to #\nsj(12, 20) s(2, 20) sj(6, -14.1)")
        self.insert_text("\n")

        self.heading2("Turn")
        self.insert_text("Another function used to change the default facing is ")
        self.inline_code("turn")
        self.insert_text(". This function will add the angle that you provide to the default facing and set that new facing as default.\n\n")
        self.code_snippet("f(20) sj(12) s(2) f(-14.1) sj(6)\n# is equivalent to #\nturn(20) sj(12) s(2) turn(-34.1) sj(6)")
        self.insert_text("\n")

        self.heading("Queueing Angles")
        self.insert_text("If you want to simulate movement but the angle is different for every tick, there is a function for that, and it comes in 2 variants. Suppose you want to simulate the sequence ")
        self.inline_code("sj(3) sa.wd(2)")
        self.insert_text(" with the rotation being ")
        self.inline_code("1, 3, 6, 10, 15")
        self.insert_text(". We could set each tick's facing manually...\n")
        self.code_snippet("sj(1, 1) sa(1, 3) sa(1, 6) sa.wd(1, 10) sa.wd(1, 15)")
        self.insert_text("But that is way too tedious to do.\n\n")

        self.heading2("Angle Queue")
        self.insert_text("Introducing the ")
        self.inline_code("anglequeue")
        self.insert_text(", or ")
        self.inline_code("aq")
        self.insert_text(" for short. This queues angles so that each tick, the default facing is set to the next angle in queue. Another way to put it is that every tick, it takes the next angle in the queue and executes ")
        self.inline_code("face")
        self.insert_text(". The function takes as many angles as you wish. So if we want to simulate ")
        self.inline_code("sj(3) sa.wd(2)")
        self.insert_text(" with the rotation being ")
        self.inline_code("1, 3, 6, 10, 15")
        self.insert_text(", you would write\n")
        self.code_snippet("aq(1,3,6,10,15) sj(3) sa.wd(2)")
        self.insert_text("\n")

        self.heading2("Turn Queue")
        self.insert_text("Now introducing ")
        self.inline_code("turnqueue")
        self.insert_text(", or ")
        self.inline_code("tq")
        self.insert_text(" for short. This queues angles so that each tick, the default facing is added with the next angle in queue. Another way to put it is that every tick, it takes the next angle in the queue and executes ")
        self.inline_code("turn")
        self.insert_text(". The function takes as many angles as you wish. Following the previous example, we can simulate the same thing using ")
        self.inline_code("tq")
        self.insert_text(".\n")
        self.code_snippet("tq(1,2,3,4,5) s(3) sa.wd(2)")
        self.insert_text("\n")

        self.heading("45 Strafes")
        self.insert_text("A 45 strafe is when you face diagonally and counterstrafe in order to gain a speed boost. For example, sprinting 5 ticks gives\n")
        self.code_snippet_with_output("s(5)")
        self.insert_text("but with 45 strafes,\n")
        self.code_snippet_with_output("s.wa(5, 45)")
        self.insert_text("\nNotice that the 45 strafe has more speed and therefore more distance than without. Almost all movement functions have a 45 strafe counterpart, of course the only ones that dont are ")
        self.inline_code("stop")
        self.insert_text(" functions. To make a movement 45 strafed, append ")
        self.inline_code("45")
        self.insert_text(" at the end, for example ")
        self.inline_code("s45 wj45 sna45")
        self.insert_text(".\n\nIt can be hard to describe in words how 45s work for different movements, so below shows, using the language of Mothball, how 45s are defined.\n\n")
        self.code_snippet("""# 45 function                Equivalent #
w45 				w.wa(1, 45)
wa45				wa.wa(1, 45)
wj45				wj.wa(1, 45)
wj45(t)				wj.wa(t, 45)

s45				s.wa(1, 45)
sa45				sa.wa(1, 45)
sj45				sj
sj45(t)				sj sa.wa(t-1, 45)
                          
sn45                         sn.wa(1, 45)
sna45                        sna.wa(1, 45)
snj45                        snj.wa(1, 45)
snj45(t)                     snj.wa(t, 45)""")
        self.insert_text("In general, for any movement that is not sprinted, the 45 strafe is equivalent to always moving diagonally while facing 45 and counterstrafing. For normal sprint movement, the 45 strafe equivalent is to jump while facing 0, and then face 45 any other time. Note that it is not all sprinted movement that follows this behavior, but unless you require to ")
        self.inline_code("sneaksprintjump45")
        self.insert_text(", then this is all you will need. If you do require ")
        self.inline_code("sneaksprintjump45")
        self.insert_text(" then see the nenxt section.\n\nAn important note to mention, you cannot append inputs to 45 strafe movements. Doing so will raise an error, and also raise confusion.\n")
        self.code_snippet_with_output("sj45.d(3, -12)")
        self.insert_text("\n")

        self.heading("Bonus Notes and Exceptions")
        self.insert_text("This section is entirely optional and is not required to be proficient in Mothball. You can safely skip this section. Information here is also provided in the full documentation of each function.\n\n")
        
        self.heading2("The SneakSprintJump45 (snsj45) Function")
        self.insert_text("This section is completely optional as this deals with Minecraft 1.14+ movement. function behaves a little differently than normal sprint jump 45s. It turns out that ")
        self.inline_code("snsj45")
        self.insert_text(" is equivalent to ")
        self.inline_code("snsj.wa(1, 9.115)")
        self.insert_text(" because that is the input and angle that gives the most speed. Otherwise, ")
        self.inline_code("sns45")
        self.insert_text(" and ")
        self.inline_code("snsa45")
        self.insert_text(" both behave like you would expect with ")
        self.inline_code("s45")
        self.insert_text(" and ")
        self.inline_code("sa45")
        self.insert_text(".\n\n")

        self.heading2("The SprintStrafeJump (stfj) Function")
        self.insert_text("This section is completely optional and is not required to be proficient with Mothball. As a last main movement related tool, and probably the most confusing, we introduce ")
        self.inline_code("stfj")
        self.insert_text(". This function sprint jumps with W and A at an angle that gives the most forward speed. Under normal circumstances, ")
        self.inline_code("stfj")
        self.insert_text(" is equivalent to ")
        self.inline_code("sj.wa(1, 17.478)")
        self.insert_text(". Emphasis on normal circumstances, because the optimal angle changes if you stand on certain blocks or have speed/slow potion effects. In fact, ")
        self.inline_code("snsj45")
        self.insert_text(" does the exact same thing, finding the best angle that gives the most speed.\n\n")
        
        self.insert_text("It is worth noting that ")
        self.inline_code("stfj")
        self.insert_text(" is weaker than ")
        self.inline_code("sj")
        self.insert_text(", so it is unlikely that you will need to use this function, but it could help calculate theoretical strategies.\n\nFinally its 45 counterpart ")
        self.inline_code("stfj45")
        self.insert_text(" behaves just like")
        self.inline_code("sj45")
        self.insert_text(". More specifically, ")
        self.inline_code("stfj45")
        self.insert_text(" is equivalent to ")
        self.inline_code("stfj")
        self.insert_text(".\n\n")

        self.heading2("Bonus Remark on 45 Strafes")
        self.insert_text("Is ")
        self.inline_code("s.wa(1, 45)")
        self.insert_text(" the same as ")
        self.inline_code("s.wd(1, -45)")
        self.insert_text("? It seems normal to think that they are, and in fact they basically are the same, but the keyword is basically. It turns out that these two can be slightly different, a difference of no more than 5 decimal places. This is because of how Minecraft significant angles are distributed. To maintain consistency, Mothball's implementation of 45 strafe movement is always equivalent to 45 strafing with W and A.")

        self.finalize()

if __name__ == "__main__":
    a = Movement()
    a.mainloop()